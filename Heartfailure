
package global.skymind.Sample;

import org.datavec.api.io.filters.BalancedPathFilter;
import org.datavec.api.io.labels.ParentPathLabelGenerator;
import org.datavec.api.io.labels.PathLabelGenerator;
import org.datavec.api.split.FileSplit;
import org.datavec.api.split.InputSplit;
import org.datavec.image.loader.BaseImageLoader;
import org.datavec.image.loader.NativeImageLoader;
import org.datavec.image.recordreader.ImageRecordReader;
import org.deeplearning4j.core.storage.StatsStorage;
import org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.inputs.InputType;
import org.deeplearning4j.nn.conf.layers.ConvolutionLayer;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.conf.layers.SubsamplingLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.deeplearning4j.ui.api.UIServer;
import org.deeplearning4j.ui.model.stats.StatsListener;
import org.deeplearning4j.ui.model.storage.InMemoryStatsStorage;
import org.deeplearning4j.util.ModelSerializer;
import org.nd4j.common.io.ClassPathResource;
import org.nd4j.evaluation.classification.Evaluation;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Adam;
import org.nd4j.linalg.lossfunctions.LossFunctions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.io.File;
import java.io.IOException;
import java.util.Random;

public class ChestXray
{
 private static Logger log= LoggerFactory.getLogger("ChestXray.class");
 static Random rng = new Random();
 static String[] allowedFormats = BaseImageLoader.ALLOWED_FORMATS;
 static PathLabelGenerator labelGenerator = new ParentPathLabelGenerator();
 static double trainFrac = 0.8;
 static int width = 50;
 static int height = 50;
 static int nChannel = 1;//Gray scale image
 static int batchSize = 12;
 static int numClass = 2;
 static double lr = 1e-3;
 static int nEpoch = 15;

 public static void main(String[] args) throws IOException {
  File datafile=new ClassPathResource("ChestXrayNew").getFile();
  FileSplit fileSplit=new FileSplit(datafile);

  ParentPathLabelGenerator labelmaker=new ParentPathLabelGenerator();
  BalancedPathFilter pathFilter=new BalancedPathFilter(rng,allowedFormats,labelmaker);

  InputSplit[] inputSplits=fileSplit.sample(pathFilter,trainFrac,100-trainFrac);
  InputSplit train=inputSplits[0];
  InputSplit test=inputSplits[1];

  ImageRecordReader trainRR = new ImageRecordReader(height, width, nChannel, labelGenerator);
  ImageRecordReader testRR = new ImageRecordReader(height, width, nChannel, labelGenerator);

  trainRR.initialize(train);
  testRR.initialize(test);

  DataSetIterator trainIter = new RecordReaderDataSetIterator(trainRR, batchSize, 1, numClass);
  DataSetIterator testIter = new RecordReaderDataSetIterator(testRR, batchSize, 1, numClass);

  MultiLayerConfiguration config = new NeuralNetConfiguration.Builder()
          .seed(56)
          .weightInit(WeightInit.XAVIER)
          .l2(0.001)//.005
          .updater(new Adam(lr))
          .activation(Activation.RELU)
          .list()
          // Convolutional, ReLU, Pooling, FC layer, output layer
          .layer(new ConvolutionLayer.Builder()
                  .kernelSize(3,3)
                  .stride(1,1)
                  .nIn(nChannel)
                  .nOut(12)
                  .build())
          .layer(new SubsamplingLayer.Builder()
                  .kernelSize(2,2)
                  .stride(2,2)
                  .poolingType(SubsamplingLayer.PoolingType.MAX)
                  .build())
          .layer(new ConvolutionLayer.Builder()
                  .kernelSize(3,3)
                  .stride(1,1)
                  .nOut(24)
                  .build())
          .layer(new ConvolutionLayer.Builder()
                  .kernelSize(3,3)
                  .stride(1,1)
                  .nOut(36)
                  .build())
          .layer(new SubsamplingLayer.Builder()
                  .kernelSize(2,2)
                  .stride(2,2)
                  .poolingType(SubsamplingLayer.PoolingType.MAX)
                  .build())
          .layer(new DenseLayer.Builder()
                  .activation(Activation.RELU)
                  .nOut(20)
                  .build())
          .layer(new DenseLayer.Builder()
                  .activation(Activation.RELU)
                  .nOut(10)
                  .build())
          .layer(new OutputLayer.Builder()
                  .activation(Activation.SOFTMAX)
                  .lossFunction(LossFunctions.LossFunction.MCXENT)
                  .nOut(numClass)
                  .build())
          .setInputType(InputType.convolutional(height, width, nChannel))
          .build();

  MultiLayerNetwork model = new MultiLayerNetwork(config);
  model.init();

  UIServer uiServer=UIServer.getInstance();
  StatsStorage storage=new InMemoryStatsStorage();
  uiServer.attach(storage);

  model.setListeners(new ScoreIterationListener(5),new StatsListener(storage,10));//5
  model.fit(trainIter, nEpoch);

  Evaluation evalTrain = model.evaluate(trainIter);
  Evaluation evalTest = model.evaluate(testIter);


  System.out.println("Train Evaluation: " + evalTrain.stats());
  System.out.println("Test Evaluation: " + evalTest.stats());

  File Savefile=new File(System.getProperty("root.dir"),"target/generated-sources/chestxraymodel.zip");
  log.info(Savefile.toString());
  ModelSerializer.writeModel(model,Savefile,false);


// Testing for single raw INput

  if(Savefile.exists() == false)
  {
   System.out.println("Model not exist. Abort");
   return;
  }
  File imageToTest = new ClassPathResource("ChestXrayRawInput/person11_bacteria_45.jpeg").getFile();
  //Load the saved model
  MultiLayerNetwork model1= ModelSerializer.restoreMultiLayerNetwork(Savefile);
  // Use NativeImageLoader to convert to numerical matrix// Load image for testing
  NativeImageLoader loader = new NativeImageLoader(height,width,nChannel);
  // Get the image into an INDarray
  INDArray image = loader.asMatrix(imageToTest);
  //Pass to the neural net for prediction
  INDArray output = model.output(image);
  log.info("Label:         " + Nd4j.argMax(output, 1));
  log.info("Probabilities: " + output.toString());
 }
}


